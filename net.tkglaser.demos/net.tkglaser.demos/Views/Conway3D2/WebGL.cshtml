@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
	<head>
		<title>tkglaser.net - Conway 3Dv2 (WebGL)</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
        <script type="text/javascript">

            var _gaq = _gaq || [];
            _gaq.push(['_setAccount', 'UA-29021529-2']);
            _gaq.push(['_trackPageview']);

            (function () {
                var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
            })();

        </script>
	</head>
	<body>

		<script src="~/Scripts/three.min.js"></script>

		<script>

		    var container, stats;
		    var camera, scene, renderer;
		    var directionallight;
		    var grid;
		    var gridold;
		    var gridmax;
		    //var sceneline;
		    var cubegeometry;
		    var cubematerial;
		    var linegeometry;
		    var linematerial;
		    var ambientLight;
		    var lastStep = Date.now();
		    var mouseX = 0, mouseY = 0;

		    var windowHalfX = window.innerWidth / 2;
		    var windowHalfY = window.innerHeight / 2;

		    initGrid();
		    seedLife();
		    preInit();
		    buildScene();
		    animate();

		    function initGrid() {
		        gridmax = 20;
		        grid = new Array(gridmax);
		        for (var i = 0; i < gridmax; i++) {
		            grid[i] = new Array(gridmax);
		            for (var j = 0; j < gridmax; j++) {
		                grid[i][j] = new Array(gridmax);
		                for (var k = 0; k < gridmax; k++) {
		                    grid[i][j][k] = false;
		                }
		            }
		        }
		    }

		    function seedLife() {
		        var h = gridmax / 2;
		        grid[h][h - 1][h] = true;
		        grid[h][h][h] = true;
		        grid[h][h + 1][h] = true;
		        grid[h - 1][h][h] = true;
		        grid[h + 1][h - 1][h] = true;
		    }

		    function step() {
		        gridold = grid;
		        initGrid();
		        for (var i = 1; i < gridmax - 1; i++) {
		            for (var j = 1; j < gridmax - 1; j++) {
		                for (var k = 1; k < gridmax - 1; k++) {
		                    var neighbours = 0;

		                    if (gridold[i - 1][j - 1][k - 1]) neighbours++;
		                    if (gridold[i][j - 1][k - 1]) neighbours++;
		                    if (gridold[i + 1][j - 1][k - 1]) neighbours++;
		                    if (gridold[i - 1][j][k - 1]) neighbours++;
		                    if (gridold[i][j][k - 1]) neighbours++;
		                    if (gridold[i + 1][j][k - 1]) neighbours++;
		                    if (gridold[i - 1][j + 1][k - 1]) neighbours++;
		                    if (gridold[i][j + 1][k - 1]) neighbours++;
		                    if (gridold[i + 1][j + 1][k - 1]) neighbours++;

		                    if (gridold[i - 1][j - 1][k]) neighbours++;
		                    if (gridold[i][j - 1][k]) neighbours++;
		                    if (gridold[i + 1][j - 1][k]) neighbours++;
		                    if (gridold[i - 1][j][k]) neighbours++;
		                    if (gridold[i + 1][j][k]) neighbours++;
		                    if (gridold[i - 1][j + 1][k]) neighbours++;
		                    if (gridold[i][j + 1][k]) neighbours++;
		                    if (gridold[i + 1][j + 1][k]) neighbours++;

		                    if (gridold[i - 1][j - 1][k + 1]) neighbours++;
		                    if (gridold[i][j - 1][k + 1]) neighbours++;
		                    if (gridold[i + 1][j - 1][k + 1]) neighbours++;
		                    if (gridold[i - 1][j][k + 1]) neighbours++;
		                    if (gridold[i][j][k + 1]) neighbours++;
		                    if (gridold[i + 1][j][k + 1]) neighbours++;
		                    if (gridold[i - 1][j + 1][k + 1]) neighbours++;
		                    if (gridold[i][j + 1][k + 1]) neighbours++;
		                    if (gridold[i + 1][j + 1][k + 1]) neighbours++;

		                    grid[i][j][k] = (neighbours == 3) || ((neighbours == 2) && gridold[i][j][k]);
		                }
		            }
		        }
		    }

		    function preInit() {

		        container = document.createElement('div');
		        document.body.appendChild(container);

		        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 10, 5000);
		        camera.position.x = 200;
		        camera.position.y = 500;

		        // Grid

		        var size = gridmax * 25, step = 50;

		        linegeometry = new THREE.Geometry();

		        for (var i = -size; i <= size; i += step) {

		            linegeometry.vertices.push(new THREE.Vector3(-size, 0, i));
		            linegeometry.vertices.push(new THREE.Vector3(size, 0, i));

		            linegeometry.vertices.push(new THREE.Vector3(i, 0, -size));
		            linegeometry.vertices.push(new THREE.Vector3(i, 0, size));

		        }

		        linematerial = new THREE.LineBasicMaterial({ color: 0x000000, opacity: 0.2 });

		        // Cubes

		        cubegeometry = new THREE.CubeGeometry(50, 50, 50);
		        cubematerial = new THREE.MeshLambertMaterial({ color: 0xffffff, shading: THREE.FlatShading, overdraw: true });


		        // Lights

		        ambientLight = new THREE.AmbientLight(Math.random() * 0x10);

		        directionalLight = new THREE.DirectionalLight(0xffffff);//Math.random() * 0xffffff);
		        directionalLight.position.x = Math.random() - 0.5;
		        directionalLight.position.y = Math.random() - 0.5;
		        directionalLight.position.z = Math.random() - 0.5;
		        directionalLight.position.normalize();

		        light = new THREE.SpotLight(0xff170f, 1);//Math.random() * 0xffffff, 2 );
		        light.position.set(0, 500, 2000);
		        light.castShadow = true;

		        light2 = new THREE.SpotLight(0xffcf0f, 1);//Math.random() * 0xffffff, 2 );
		        light2.position.set(0, -400, -1800);
		        light2.castShadow = true;

		        renderer = new THREE.WebGLRenderer({ antialias: true });
		        renderer.sortObjects = true;
		        renderer.setSize(window.innerWidth, window.innerHeight);
		        //renderer.setClearColor( 0, 1 );

		        renderer.shadowCameraFov = camera.fov;
		        renderer.shadowMapBias = 0.0039;
		        renderer.shadowMapDarkness = 0.5;
		        renderer.shadowMapWidth = renderer.shadowMapHeight = 2048;

		        renderer.shadowMapEnabled = true;
		        renderer.shadowMapSoft = true;


		        container.appendChild(renderer.domElement);

		        document.addEventListener('mousemove', onDocumentMouseMove, false);

		        window.addEventListener('resize', onWindowResize, false);

		    }

		    function buildScene() {
		        scene = new THREE.Scene();
		        //var sceneline = new THREE.Line(linegeometry, linematerial);
		        //sceneline.type = THREE.LinePieces;
		        //scene.add(sceneline);
		        for (var i = 0; i < gridmax; i++) {
		            for (var j = 0; j < gridmax; j++) {
		                for (var k = 0; k < gridmax; k++) {
		                    if (grid[i][j][k] == true) {
		                        var mat = new THREE.MeshLambertMaterial({ color: Math.random() * 0xffffff, shading: THREE.FlatShading, overdraw: true });
		                        var cube = new THREE.Mesh(cubegeometry, mat);
		                        cube.scale.y = 1;

		                        cube.castShadow = true;
		                        cube.receiveShadow = true;

		                        cube.position.x = i * 50 - gridmax * 25 + 25;
		                        cube.position.y = k * 50 - gridmax * 25 + 25;
		                        cube.position.z = j * 50 - gridmax * 25 + 25;

		                        scene.add(cube);
		                    }
		                }
		            }
		        }
		        //scene.add(ambientLight);
		        //scene.add(directionalLight);
		        scene.add(light);
		        scene.add(light2);
            }

		    function onWindowResize() {

		        camera.left = window.innerWidth / -2;
		        camera.right = window.innerWidth / 2;
		        camera.top = window.innerHeight / 2;
		        camera.bottom = window.innerHeight / -2;

		        camera.updateProjectionMatrix();

		        renderer.setSize(window.innerWidth, window.innerHeight);

		    }

		    function onDocumentMouseMove(event) {

		        mouseX = (event.clientX - windowHalfX);
		        mouseY = (event.clientY - windowHalfY);

		    }

		    function animate() {

		        requestAnimationFrame(animate);

		        render();

		    }

		    function render() {
		        if (Date.now() - lastStep > 2000) {
		            lastStep = Date.now();
		            buildScene();
		            step();
		        }
		        var timer = Date.now() * 0.00005;

		        timer += mouseX * 0.001;

		        camera.position.x = Math.cos(timer) * 2000;
		        camera.position.z = Math.sin(timer) * 2000;
		        camera.position.y += (-mouseY - camera.position.y) * 1 + 1000;
		        camera.lookAt(scene.position);

		        directionalLight.position.x = camera.position.x;
		        directionalLight.position.y = camera.position.y;
		        directionalLight.position.z = camera.position.z;
		        directionalLight.position.normalize();

		        var dt = new Date();
		        var dl = 5000;
		        light.position.set(camera.position.x, camera.position.y + 50, camera.position.z);//dl * Math.sin( t ), dl * Math.cos( t ), dl * Math.cos( t ) * Math.sin( t ) ); 
		        var t = .00025 * dt.getTime();
		        light2.position.set(dl * Math.sin(t) * Math.cos(t), 1000 /*dl * Math.sin(t)*/, dl * Math.cos(t));

		        renderer.render(scene, camera);

		    }

		</script>

	</body>
</html>
